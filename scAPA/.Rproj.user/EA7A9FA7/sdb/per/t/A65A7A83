{
    "collab_server" : "",
    "contents" : "\n# Define the class --------------------------------------------------------\nsetClass(\"scAPAList\",\n         slots = list(expr.mat = \"data.frame\", clus.counts = \"data.frame\",\n                      cluster.anot = \"data.frame\",\n                      row.Data = \"data.frame\",\n                      norm = \"list\",\n                      down.seq = \"data.frame\"))\n\n\n# Class definition --------------------------------------------------------\nsetClass(\"scAPAreasults\",\n         slots = list(utrs.clus.counts = \"list\", utrs.cells.counts = \"list\",\n                      pvalues = \"list\",\n                      pAi.clus = \"matrix\",\n                      pAi.cells = \"matrix\",\n                      ppui.clus = \"matrix\",\n                      ppui.cells = \"matrix\",\n                      cluster.anot = \"data.frame\",\n                      metadata = \"data.frame\"))\n\nsetGeneric(\"set_scAPAreasults\", function(x, int, cpm){\n  standardGeneric(\"set_scAPAreasults\")\n})\n\n# Subsetting --------------------------------------------------------------\nsetMethod(\"[\",\n          c(x = \"scAPAreasults\"),\n          function(x,i,j,drop=\"missing\") {\n            if(is.character(i)) i <- which(names(reasults@utrs.clus.counts) %in% i)\n            if(length(x@utrs.cells.counts) > 0) {\n            .subutrs.cells.counts <- x@utrs.cells.counts[i]\n            } else .subutrs.cells.counts <- list()\n            .subutrs.clus.counts <- x@utrs.clus.counts[i]\n            .subpAi.clus <- x@pAi.clus\n            if(nrow(x@pAi.clus) > 0) .subpAi.clus <- x@pAi.clus[i, ]\n            .subpAi.cells <- x@pAi.cells\n            if(nrow(x@pAi.cells) > 0) .subpAi.cells <- x@pAi.cells[i, ]\n            .subppui.clus <- x@ppui.clus\n            if(nrow(x@ppui.clus) > 0) .subppui.clus <- x@ppui.clus[i,]\n            .subppui.cells <- x@ppui.cells\n            if(nrow(x@ppui.cells) > 0) .subppui.cells <- x@ppui.cells[i,]\n            .subcluster.anot <- x@cluster.anot\n            .submetadata <- x@metadata\n            .subpvalues <- lapply(x@pvalues, FUN = function(x){x[i,]})\n            methods::new(\"scAPAreasults\", utrs.cells.counts = .subutrs.cells.counts,\n                utrs.clus.counts = .subutrs.clus.counts,\n                pAi.clus = .subpAi.clus,\n                pAi.cells = .subpAi.cells, ppui.clus = .subppui.clus,\n                ppui.cells = .subppui.cells,\n                metadata = .submetadata, pvalues = .subpvalues)\n          })\n\n# Creat the object --------------------------------------------------------\nsetMethod(f = \"set_scAPAreasults\", signature =  c(x = \"scAPAList\"),\n          definition = function(x, int = F, cpm = NULL){\n            if(!int){\n            peakID <- x@clus.counts[,1]\n            peak.info <- extract_peak_info(x = peakID)\n            to.split <- cbind.data.frame(peak.info[,-1],x@clus.counts[,-1])\n            rownames(to.split) <- peak.info[,1]\n            .utrs.clus.counts <- split(x = to.split[, -1], f = to.split[,1],\n                                       drop = T)\n            row.n <- lapply(.utrs.clus.counts, nrow)\n            f.list.utr <- .utrs.clus.counts[row.n > 1]\n            utrs.clus.counts <- f.list.utr\n            if(ncol(x@expr.mat) == 0){\n              out <- methods::new(\"scAPAreasults\", utrs.clus.counts = utrs.clus.counts,\n                           utrs.cells.counts= list(),\n                           cluster.anot = data.frame())\n            } else{\n            to.split <- cbind.data.frame(peak.info[,-1],x@expr.mat[,-1])\n            rownames(to.split) <- peak.info[,1]\n            .utrs.clus.counts <- split(x = to.split[, -1], f = to.split[,1],\n                                       drop = T)\n            row.n <- lapply(.utrs.clus.counts, nrow)\n            f.list.utr <- .utrs.clus.counts[row.n > 1]\n            .utrs.cells.counts <- f.list.utr\n            out <- methods::new(\"scAPAreasults\", utrs.clus.counts = utrs.clus.counts,\n                utrs.cells.counts= .utrs.cells.counts,\n                cluster.anot = x@cluster.anot)\n            }\n            }\n            if(int){\n              total <- rowSums(x@norm$CPM)\n              y <- x[which(((total > cpm) & (grepl(x = x@clus.counts[,1], pattern = \"_Int_\")))),]\n              introns <- cbind.data.frame(y@row.Data[,c(1:3,6)], y@clus.counts)\n              introns$gene <- gsub(pattern = \"_Int_.*$\", replacement = \"\", x = introns[,5])\n              z <- x[(!(x@clus.counts$Peak_ID %in% introns[,5]))&(total > cpm),]\n              utrs <- cbind.data.frame(z@row.Data[,c(1:3,6)], z@clus.counts)\n              utrs$gene <- gsub(pattern = \"_.*$\", replacement = \"\", x = utrs[,5])\n              int_utr <- merge(introns, utrs, by = \"gene\")\n              int_utr <- dplyr::filter(int_utr, ifelse(Strand.x == \"+\",\n                                                       End.x < End.y,\n                                                       End.x > End.y))\n              colnames(int_utr) <- paste0(\"V\", 1:15)\n              int_utr <-  dplyr::group_by(int_utr, V1, V2, V3, V4, V5, V6, V7, V8)\n              int_utr <- dplyr::summarise(int_utr, utrAlv = sum(V14), utrcancer = sum(V15))\n              int_utr <- as.data.frame(int_utr)\n              p <- split(int_utr, f = int_utr$V6, drop = T)\n              dat.fan <- function(x){\n                out <- data.frame(feature = c(1,2), Alv = as.integer(x[c(7,9)]),\n                                  cancer = as.integer(x[c(8,10)]))\n                out\n              }\n              .utrs.clus.counts <- lapply(p, dat.fan)\n              .utrs.cells.counts <- list()\n              .metadata <- int_utr[,c(2,3,4,6,1,5)]\n              colnames(.metadata) <- c(\"Chr\", \"Start\", \"End\", \"Intron_ID\", \"Gene\", \"Strand\")\n               out <- methods::new(\"scAPAreasults\", utrs.clus.counts = .utrs.clus.counts,\n                                    utrs.cells.counts= .utrs.cells.counts,\n                                   metadata = .metadata)\n              }\n            out\n          })\n\n# Show --------------------------------------------------------------------\nsetMethod(\"show\",\n          c(object = \"scAPAreasults\"),\n          function(object) {\n            if(length(object@utrs.cells.counts) > 0){\n              cat(\"an scAPA reasults object\\n\\n# 3' UTR with APA: \",\n                  length(object@utrs.clus.counts), \"\\n# cells: \",\n                  ncol(object@utrs.cells.counts[[1]]),\"\\n clusters: \",\n                  colnames(object@utrs.clus.counts[[1]][-1]), \"\\n\",\n                  \"metadata: \", colnames(object@metadata), \"\\n\")\n            } else {\n              cat(\"an scAPA reasults object\\n\\n# 3' UTR with APA:\\t\",\n                  length(object@utrs.clus.counts), \"\\no cell expression data\",\n                  \"\\nclusters:\\t\",\n                  colnames(object@utrs.clus.counts[[1]][-1]), \"\\n\")\n            }\n            if(length(object@pvalues) > 0) {\n              cat(\"# significant (FDR < 5%) APA events: \",\n                  sum(object@pvalues[[1]][,2] < 0.05, na.rm = T), \"\\n\")\n\n            }\n            if(nrow(object@pAi.clus) > 0) {\n              cat(\"\\nwighted mean of pA index summary:\\n\")\n              print(summary(object@pAi.clus))\n            }\n            if(nrow(object@ppui.clus) > 0) {\n              cat(\"\\nproximal peak usage index summary:\\n\")\n              print(summary(object@ppui.clus))\n            }\n          })\n\nsetMethod(\"head\",\n          c(x = \"scAPAreasults\"),\n          function(x) {\n            show(object = x)\n          })\nsetMethod(\"summary\",\n          c(object = \"scAPAreasults\"),\n          function(object) {\n            show(object = object)\n          })\n\n# Test APA ----------------------------------------------------------------\nsetGeneric(\"test_APA\", function(x, clus = \"all\"){\n  standardGeneric(\"test_APA\")\n})\nsetMethod(\"test_APA\",\n          c(x = \"scAPAreasults\"),\n          function(x, clus) {\n            names.pval <- paste0(clus, collapse = \"_\")\n            x@pvalues <- c(x@pvalues, names.pval = matrix())\n            test_utr <- function(z, .clus) {\n              .clus = clus\n              y <- z[, -c(1)]\n              if(length(.clus) > 1) y <- y[, .clus]\n              u <- suppressWarnings(chisq.test(y)$p.value)\n            }\n            ptable <- lapply(X = x@utrs.clus.counts, FUN = test_utr, .clus = clus)\n            ptable <- do.call(what = rbind, args = ptable)\n            ptable <- as.matrix(ptable)\n            colnames(ptable) <- \"pval\"\n            qval <- p.adjust(ptable[,1])\n            ptable <- cbind(ptable, qval)\n            x@pvalues$names.pval <- ptable\n            names(x@pvalues) <- c(names(x@pvalues)[-length(x@pvalues)],\n                                  names.pval)\n            x\n          })\n# Calculate pA index ------------------------------------------------------\nsetGeneric(\"calc_pAi_mat\", function(x){\n    calc_mean_pAi <- function(z) {\n      peak.counts <- z[,-1]\n      peak.index <- z[,1]\n      utr.total.couns = colSums(peak.counts)\n      frac.counts <- t((t(peak.counts))/utr.total.couns)\n      colSums(frac.counts * peak.index)\n    }\n    mean.pA.mat <- lapply(X = x, FUN = calc_mean_pAi)\n    mean.pA.mat <- do.call(what = rbind, args = mean.pA.mat)\n    mean.pA.mat <- as.data.frame(mean.pA.mat)\n    colnames(mean.pA.mat) <- paste0(colnames(mean.pA.mat), \"_<pA>\")\n    data.matrix(mean.pA.mat)\n  })\n\nsetMethod(\"calc_pAi_mat\",\n          c(x = \"scAPAreasults\"),\n          function(x) {\n            x@pAi.clus <- calc_pAi_mat(x = x@utrs.clus.counts)\n            if(length(x@utrs.cells.counts > 0)){\n            x@pAi.cells <- calc_pAi_mat(x = x@utrs.cells.counts)\n            }\n            x\n          })\n# Calculate PUI -----------------------------------------------------------\nsetGeneric(\"calc_p_pui_mat\", function(x, psudo =1){\n    calc_prox_pui <- function(z, .psudo = psudo){\n      peak.counts <- z[,-1]\n      peak.counts[,(colSums(peak.counts) == 0)] <-  NA\n      peak.counts <- peak.counts + .psudo\n      utr.geo.mean = apply(peak.counts, 2, EnvStats::geoMean)\n      prox.peak.counts <- z[z[, 1] == 1, -1] + .psudo\n      prox.peak.counts <- as.numeric(prox.peak.counts)\n      out <- log2(prox.peak.counts/utr.geo.mean)\n      out\n    }\n    ppui.mat <- lapply(X = x, FUN = calc_prox_pui)\n    ppui.mat <- do.call(what = rbind, args = ppui.mat)\n    colnames(ppui.mat) <- paste0(colnames(ppui.mat), \"_proximal_PUI\")\n    ppui.mat\n})\nsetMethod(\"calc_p_pui_mat\",\n          c(x = \"scAPAreasults\"),\n          function(x, psudo) {\n            x@ppui.clus <- calc_p_pui_mat(x = x@utrs.clus.counts,\n                                          psudo = psudo)\n            if(length(x@utrs.cells.counts > 0)){\n            x@ppui.cells <- calc_p_pui_mat(x = x@utrs.cells.counts,\n                                           psudo = psudo)\n            }\n            x\n          })\n\n\n# Summarise reasults ------------------------------------------------------\n\nsetGeneric(\"disply_reasults\", function(x, org){\n  standardGeneric(\"disply_reasults\")\n})\nsetMethod(\"disply_reasults\",\n          c(x = \"scAPAreasults\"),\n          function(x, org){\n            if(org == \"Mm\") annot <- readRDS(paste0(script.WD,\"/data/Mm10_annot.RDS\"))\n            if(org == \"Hs\") annot <- readRDS(paste0(script.WD,\"/data/hg19_annot.RDS\"))\n            out <- data.frame(UTR_ID = row.names(x@pvalues[[1]]), x@pvalues[[1]])\n            out <- merge(out, x@pAi.clus, by = \"row.names\")\n            out <- merge(out, x@ppui.clus, by.x = \"UTR_ID\", by.y = \"row.names\")\n            out <- merge(annot[,c(1,2,6)], out, by = \"UTR_ID\")\n            out <- out[,-4]\n            out\n          })\n",
    "created" : 1562762751747.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4034420602",
    "id" : "A65A7A83",
    "lastKnownWriteTime" : 1562836977,
    "last_content_update" : 1562836977820,
    "path" : "/specific/netapp5_2/elkon/eldadshulman/scAPA/R/APAreasults.R",
    "project_path" : "R/APAreasults.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}