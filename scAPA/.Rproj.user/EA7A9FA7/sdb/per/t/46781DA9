{
    "collab_server" : "",
    "contents" : "\n\n# Load R packeges and function scripts---------------------------------------------------------\nrequire(dplyr, lib.loc = \"/home/elkon/eldadshulman/Rfive\", warn.conflicts = F)\nrequire(tidyr, lib.loc = \"/home/elkon/eldadshulman/Rfive\", warn.conflicts = F)\nrequire(ggplot2, lib.loc = \"/home/elkon/eldadshulman/Rfive\", warn.conflicts = F)\nrequire(EnvStats,lib.loc = \"/home/elkon/eldadshulman/Rfive\", warn.conflicts = F)\nrequire(scAPA, lib.loc = \"/home/elkon/eldadshulman/Rfive\" , warn.conflicts = F)\nrequire(Rsubread, lib.loc = \"/home/elkon/eldadshulman/Rfive\" , warn.conflicts = F)\nrequire(pbapply, lib.loc = \"/home/elkon/eldadshulman/Rfive\" , warn.conflicts = F)\nrequire(parallel, warn.conflicts = F)\nlibrary(mclust)\n\n# Read in bam.file.txt and cell.clusterfile.txt ---------------------------\nsetwd(\"/home/elkon/eldadshulman/datasets/Eldad/APA/brain_atlas/Ad10/down_mclust/\")\ntable_brain <- data.frame(num = 1:9, peak = 1:9, apa = 1:9)\npeaks <- list.files(pattern = \"newpeaks_0[.]\\\\d$\")\nfrac <- paste0(\"bam_0.\", 1:9,\"$\")\nrdsfiles <- paste0(\"a\", 1:9,\".RDS\")\norg = \"Mm\"\nbedtools.path = \"\"\nsamtools.path = \"\"\nfor(i in 1:nrow(table_brain)){\n  bed_name <- peaks[i]\n  merge_peaks(bedtools.path = bedtools.path,\n              peaks.file = bed_name, path = \"./\")\n  peaks.bed <- intersect_peaks(org = org, bed.name = \"./merge.peakfile.bed\",\n                               path = \"\", bedtools.path = bedtools.path)\n  write.bed(.x = peaks.bed, f = \"./peaks.bed\")\n  bam.cluster.files <- list.files(pattern = frac[i])\n  bam.cluster <- paste(bam.cluster.files, collapse = \" \")\n\nsamtools.merge.commad <- paste0(samtools.path, \"samtools merge merged.bam \",\n                                bam.cluster)\nsystem(command = samtools.merge.commad, wait = T)\n\nwig.plus.command <- paste0(bedtools.path, \"bedtools genomecov -ibam merged.bam \",\n                           \"-bg -strand + | awk 'BEGIN {OFS = \\\"\\t\\\"}{print $1\",\n                           \", $2, $3, $4, \\\".\\\", \\\"+\\\"}' > merged.wig\")\nsystem(command = wig.plus.command, wait = T)\nwig.minus.command <- paste0(bedtools.path, \"bedtools genomecov -ibam merged.bam \",\n                            \"-bg -strand - | awk 'BEGIN {OFS = \\\"\\t\\\"}{print $1\",\n                            \", $2, $3, $4, \\\".\\\", \\\"-\\\"}' >> merged.wig\")\nsystem(command = wig.minus.command, wait = T)\nsystem(\"rm merged.bam\", wait = T)\n\nintersect.wig.command <- paste0(bedtools.path, \"bedtools intersect -s -wb \",\n                                \" -b peaks.bed -a merged.wig > intersected.wig\")\nsystem(intersect.wig.command, wait = T)\n\npeaks.wig <- read.delim(file = \"intersected.wig\", header = F)\n\npeaks.wig <- split(x = peaks.wig, f = peaks.wig$V10, drop = T)\nbed <- plyr::rbind.fill(parallel::mclapply(1:length(peaks.wig), FUN = creat_mclus,\n                                           mc.cores=30, mc.preschedule=T))\nsaf <- creat_saf(bed = bed)\n\n\ncounts <- featureCounts(files = bam.cluster.files ,isGTFAnnotationFile = F,\n                        annot.ext = saf, largestOverlap = T, nthreads = 30)\nco <- cbind.data.frame(rownames(counts$counts), counts$counts)\nco <- co[,-6]\nmeta <- counts$annotation\n\nmeta <- meta[,c(2,3,4,1,6,5)]\nfasta.path = \"/specific/netapp5_2/elkon/Bowtie2_indexes/Mm/mm10/mm10.fa\"\nchar.length.path = \"/home/elkon/Bowtie2_indexes/Mm/mm10/mm10_chr_len.txt\"\nbedtools.path = \"\"\nmetadata <- read_down.seq(saf = counts$annotation, char.length.path = char.length.path, fasta.path = fasta.path,\n                          chr.modify = T)\naseq <- metadata[,c(4,6)]\na <- set_scAPAList(.clus.counts = co, .row.Data = meta, .down.seq = aseq)\nsaveRDS(object = a, file = rdsfiles[i])\na <- calc_cpm(a)\nkeep.cpm <- rowSums(a@norm$CPM) > 10\na.fil <- a[keep.cpm,]\nhas.Aseq <- find_internal_prim_seq(x = a.fil, int.priming.seq = \"AAAAAAAA\",\n                                   left = 10,\n                                   right = 140)\nkeep.int.pr <- as.vector(!has.Aseq[,2])\n\na.fil <-a.fil[which(keep.int.pr),]\n\nreasults <- set_scAPAreasults(a.fil)\nreasults <- test_APA(reasults)\nreasults <- calc_pAi_mat(reasults)\nreasults <- calc_p_pui_mat(reasults)\n\napano <- sum(reasults@pvalues$all[,2] < 0.05, na.rm = T)\npeakno <- nrow(a.fil@row.Data)\ntable_brain$peak[i] <-peakno\ntable_brain$apa[i] <- apano\nsystem(\"rm utr.peaks.bed\", wait = T)\nprint(table_brain)\nsystem(\"rm merged.wig\", wait = T)\nsystem(\"rm intersected.wig\", wait = T)\n}\n\nsaveRDS(object = table_brain, file = \"brain_table.RDS\")\n\n# Mclust ------------------------------------------------------------------\n\n# # Detect downstream sequences of As ---------------------------------------\n# metadata <- read_down.seq(GTF = peaks.GTF, char.length.path = char.length.path, fasta.path = fasta.path,\n#                           chr.modify = T)\n# write.table(x = metadata, file = \"outs/metadata.txt\", quote = F, sep = \"\\t\",\n#             row.names = F, col.names = T)\n# saveRDS(object = metadata[,c(4,1:3,5)], file = \"outs/metadata.RDS\")\n# saveRDS(object = metadata[,c(4,6)], file = \"outs/down.seq.RDS\")\n# # write_log(stage = \"detect_Aseq\")\n# #\n\n# FeaturCounts ------------------------------------------------------------\n\n# setwd(\"./temp/\")\n# split_count_bam <- function(CB, sample){\n#   cell.sam <- paste0(sample, \"_\", CB, \".sam\")\n#   split.bam.command <- paste0(\"samtools view -h dedup.\", sample,\".bam | awk -v \",\n#                               \"tag=\\\"CB:Z:\",CB, \"\\\" '($0 ~ /^@/ || \",\n#                               \"index($0,tag)>0)' > \", sample, \"_\", CB, \".sam\")\n#   system(command = split.bam.command, wait = T)\n#   x <- featureCounts(files = cell.sam, annot.ext = \"../utr.peaks.gtf\",\n#                      isGTFAnnotationFile = T, countMultiMappingReads = F)\n#   system(command = paste0(\"rm \", cell.sam), wait = T)\n#   rownames(x[[1]]) <- x[[2]][,1]\n#   colnames(x[[1]]) <- paste0(sample, \"_\", CB)\n#   x[[1]]\n# }\n#\n# expression <- list(length(samples.vector))\n#\n# for (i in seq_along(samples.vector)) {\n#   list.file <- paste0(\"../../clusters_\", samples.vector[i], \".txt\")\n#   list.cells <- read.delim(file = list.file, header = F)\n#   list.cells <- as.character(list.cells[,1])\n#   exp.mat <- list(length(list.cells))\n#   exp.mat <- pbapply::pblapply(X = list.cells, FUN = split_count_bam,\n#                                sample = samples.vector[i] , cl = 20)\n#   exp.mat <- do.call(what = cbind, args = exp.mat)\n#   exp.data <- data.frame(Peak_ID = row.names(exp.mat),\n#                          exp.mat)\n#   expression[[i]] <- exp.data\n# }\n#\n#\n# setwd(\"../\")\n#\n# saveRDS(object = expression, file =  \"expression.RDS\")\n# exp <- Reduce(function(x, y){merge(x, y, \"Peak_ID\", all = T)}, x = expression)\n# saveRDS(object = exp, file =  \"exp.RDS\")\n#\n#\n# #Proccess expression and cluster files ---------------------------------------------------------------\n# #replacing gene symbol with ensemble gene\n# clusters <- process_cluster.files(sample.names = samples.vector)\n# #  Saving output\n# saveRDS(file = \"outs/Peak.expression.mat.RDS\", object = expression)\n# write.table(file = \"outs/Peak.expression.mat.txt\", x =  expression, quote = F,\n#             sep = \"\\t\", col.names = T, row.names = F)\n# saveRDS(file = \"outs/clusters.RDS\", object =  clusters)\n# write.table(file = \"outs/clusters.txt\", x = clusters, quote = F,\n#             sep = \"\\t\", col.names = F, row.names = F)\n# #\n# # # APA analysis-----------------------------------------------------------\n#\n# #expression <- readRDS(\"outs/Peak.expression.mat.RDS\")\n# #clusters <- readRDS(\"outs/clusters.RDS\")\n# metadata <- readRDS(\"outs/metadata.RDS\")\n# down.seq <- readRDS(\"outs/down.seq.RDS\")\n# colnames(exp) <- gsub(pattern = \"[.]\", replacement = \"-\", x = colnames(exp))\n# pAList <- set_scAPAList(.expr.mat = exp, .cluster.anot = clusters, .down.seq = down.seq, .row.Data = metadata)\n# pAList <- calc_clusters_counts(pAList)\n# pAList <- calc_cpm(pAList)\n# keep.cpm <- rowSums(pAList@norm$CPM) > 10\n# pAList.fil <- pAList[keep.cpm,]\n# .int.priming.seq <- paste0(rep(x = \"A\", A.number), collapse = \"\")\n# has.Aseq <- find_internal_prim_seq(x = pAList.fil, int.priming.seq = .int.priming.seq,\n#                                    left = filter.border.left,\n#                                    right = filter.border.right)\n# keep.int.pr <- as.vector(!has.Aseq[,2])\n#\n# pAList.fil <- pAList.fil[which(keep.int.pr),]\n# reasults <- set_scAPAreasults(pAList.fil)\n# reasults <- test_APA(reasults)\n# reasults <- calc_pAi_mat(reasults)\n# reasults <- calc_p_pui_mat(reasults)\n#\n#\n# # Write final outputs -----------------------------------------------------\n#\n# reasults.output <- disply_reasults(x = reasults , org = org)\n# pAList <- annotate(pAList, org = org)\n# pAList.fil <- annotate(pAList.fil, org = org)\n# saveRDS(object = reasults, file = \"./outs/APA.events.RDS\")\n# saveRDS(object = pAList, file = \"./outs/ThreeUTR.peaks.unfiltered.RDS\")\n# saveRDS(object = pAList.fil, file = \"./outs/ThreeUTR.peaks.filtered.RDS\")\n#\n# write.table(x = reasults.output, file = \"./outs/APA.events.txt\", quote = F,\n#             sep = \"\\t\", col.names = T, row.names = F)\n#\n# write.table(x = pAList.fil@row.Data, file = \"./outs/ThreeUTR.peaks.txt\",\n#             quote = F, sep = \"\\t\", col.names = T, row.names = F)\n# file.create(\"./outs/summary.txt\")\n# cat(\"Number of peaks passed fillter:\\t\", nrow(pAList.fil@clus.counts),\n#     \"\\nNumber of significant (FDR < 5%) APA events:\",\n#     sum(reasults@pvalues[[1]][,2] < 0.05, na.rm = T),\n#     \"\\n\", file = \"./outs/summary.txt\")\n#\n# # Plot --------------------------------------------------------------------\n# cluster <- gsub(x = reasults@ppui.clus, pattern = \"_<pA>\", replacement = \"\")\n# tidy.pui <- data.frame(Cluster = cluster , Proximal.PUI = as.vector(reasults@ppui.clus))\n# tidy.ppui <- as.data.frame(reasults@ppui.clus)\n# colnames(tidy.ppui) <- gsub(x = colnames(tidy.ppui) , pattern = \"_proximal_PUI\",\n#                             replacement = \"\")\n# tidy.ppui <- tidyr::gather(data = tidy.ppui)\n# pdf(\"./outs/Proximal.PUI.ECDF.pdf\")\n# p <- ggplot2::ggplot(data = tidy.ppui, ggplot2::aes(x = value, fill = key ))\n# p <- p + ggplot2::stat_ecdf(size = 1)\n# p <- p + ggplot2::theme_bw()\n# p <- p + ggplot2::ylab(\"Proximal peak usage index\")\n# print(p)\n# dev.off()\n#\n# # End of script -----------------------------------------------------------\n# # Removing remining temporary files\n# #tryCatch(system(command  = \"rm temp\\*\", waite = T))\n# write(x = cat(Sys.time(), \"\\tscAPA.script.R Finished.\\nOutputs are in the \",\n#               \"directory:\\n\", path.to.files, \"/scAPA/outs\"),\n#       file = \"../scAPA.script.log\")\n# cat(\"scAPA.script.R Finished.\\nOutputs are in the directory:\\n\",\n#     path.to.files, \"/scAPA/outs\")\n# system(command  = \"cat temporal\\*\", waite = T)\n\n",
    "created" : 1562772122845.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1174920098",
    "id" : "46781DA9",
    "lastKnownWriteTime" : 1562772605,
    "last_content_update" : 1562772605557,
    "path" : "/specific/netapp5_2/elkon/eldadshulman/datasets/Eldad/APA/brain_atlas/Ad10/down_mclust/script/new_downsample.r",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}